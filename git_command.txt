git init
git clone
git remote -v
git pull
git push
===================================================================
working directory
staging area
repository: after commit, changes have removed from staging -> git repo
===================================================================

git add <file>
git add .

discard change -> before add
git checkout -- <file>: discard changes in working directory
git restore <file>: discard changes in working directory

after add:
git restore --staged <file>: unstage
git reset HEAD <file>: unstage


git log
git show <commit_id>
git diff: show change with files already in repo
===================================================================
git config --global user.email "email"
git config --global user.name "Toan"
git config --global user.name
===================================================================
git stash save "name"
git stash list
git stash pop
===================================================================
after commit:

git reset HEAD~1: move in staging area
git reset --hard <commit_id>: remove all changes
HEAD~1: the last commit

===================================================================
branch and merge

git branch
git checkout <branch_name>
git checkout -b feature/dog-class
    - create anh checkout new branch
    - feature/dog-class: how to name for branch
take a look:
    - switch feature/dog-class -> switched to branch 'witch feature/dog-class'
    - switch to main branch -> Switched to branch 'main'. Your branch is up to date with 'origin/main'.
    - branch: main, remotes/origin/main

remotes/origin/main vs main:
    - at time t: remotes/origin/main and main point to commit id <a>
    - in local at branch main, dev update commit id <b>
    - so in current time
        + remotes/origin/main poin to <a>, main point to <b>
    - after push from local -> remote => both emotes/origin/main and main point to <b>
origin: main branch, different between "main branch" with branch named "main"

git merge:
    - merge B into A
    1. first: checkout master
    2. git merge B: mean merge B into A

git branch -D <branch_name> (delete branch)

===================================================================
after commit:
git reset --soft <commid_id>: move all from repo to <commid_id>, in staging area (ready to commit)
git reset --mixed <commit_id>: unstage (working directory)
git reset --hard <commit_id>: remove commit

===================================================================
git revert <commid_id>: revert all content at <commit_id>, then will create new commit_id

===================================================================
pull request
1. git checkout -b <feature_branch>
2. git push origin <branch>
3. create a pull request on github
4. reivew code
    4.1 review code online (github)
    4.2 fetch branch into local to test offline (optional)
    4.3 approve the pull request
5. merge to master