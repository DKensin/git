git init
git clone
git pull
git push
===================================================================
git remote: default is origin
git remote -v: url of default origin
git remote add short_name remote_URL
git clone/fetch/pull remote_name
git clone remote_name
git push remote_name branch_name: git push origin master
git remote rm/remove remote_name: git remote rm origin
git remote rename old_name new_name
git remote show remote_name
git remote set-url remote_name new_URL
===================================================================
working directory
staging area
repository: after commit, changes have removed from staging -> git repo
===================================================================
git add <file>
git add .
git add --ignore-removal . : add all new and updated files only
git add -u: add all modified and deleted files
git add *.java (add all java file): add files by wildcard (use pattern)
===================================================================
discard change

before add
git checkout -- <file>: discard changes in working directory
git restore <file>: discard changes in working directory

after add:
git restore --staged <file>: unstage
git reset HEAD <file>: unstage
===================================================================
git log
git log --oneline
git show <commit_id>
git diff: show change with files already in repo
===================================================================
git config --global user.email "email"
git config --global user.name "Toan"
git config --global user.name
===================================================================
git stash
git stash save "message"
git stash list
git stash apply [stash_id (stash@{0})]: re-apply the change
git stash show: show the change
git stash show -p: show the edited files
git stash pop [stash_id]
git stash drop [stash_id]
git stash clear: delete all stashes at once
git stash branch branch_name
===================================================================
after commit:
git reset HEAD~1: move in staging area
git reset --hard <commit_id>: remove all changes
HEAD~1: the last commit
===================================================================
branch and merge

git branch
git checkout <branch_name>
git checkout -b feature/dog-class
    - create anh checkout new branch
    - feature/dog-class: how to name for branch
take a look:
    - switch feature/dog-class -> switched to branch 'witch feature/dog-class'
    - switch to main branch -> Switched to branch 'main'. Your branch is up to date with 'origin/main'.
    - branch: main, remotes/origin/main

remotes/origin/main vs main:
    - at time t: remotes/origin/main and main point to commit id <a>
    - in local at branch main, dev update commit id <b>
    - so in current time
        + remotes/origin/main poin to <a>, main point to <b>
    - after push from local -> remote => both emotes/origin/main and main point to <b>
origin: main branch, different between "main branch" with branch named "main"

git merge:
    - merge B into A
    1. first: checkout master
    2. git merge B: mean merge B into A

git branch -D <branch_name> (delete branch)

===================================================================
after commit:
git reset --soft <commid_id>: move all from repo to <commid_id>, in staging area (ready to commit)
git reset --mixed <commit_id>: unstage (working directory)
git reset --hard <commit_id>: remove commit

===================================================================
git revert <commid_id>: revert all content at <commit_id>, then will create new commit_id
git revert -m 1 <commit_id>: (1 = specify the parent number): revert merge

===================================================================
pull request
1. git checkout -b <feature_branch>
2. git push origin <branch>
3. create a pull request on github
4. reivew code
    4.1 review code online (github)
    4.2 fetch branch into local to test offline (optional)
    4.3 approve the pull request
5. merge to master

===================================================================
git squash
git log --oneline
it rebase -i HEAD~3
it rebase -i <after_this_commit>
replace p => s
add # before commit content
git push origin <current_branch>
git push -f origin <current_branch>
===================================================================
git tag:
===================================================================
git checkout branch_name: git checkout master
git tag tag_name: create tag
git tag
git show
git tag -l ".*": wildcard
git tag show tag_name
annotated tags: git tag tag_name -m "tag_message": contain some additional information: author name, email, date...
light-weighted tag: git tag tag_name
git push origin tag_name
git push origin --tag / git push --tags: push all the available tags at once
git tag --d tag_name / git tag --delete tag_name
git push origin -d tag_name / git push origin --delete tag_name: delete a remote tag
git checkout tag_name

git branch -a: list all remote and local branch
git push --set-upstream origin master: set master branch ass the default remote branch
git branch --set-upstream-to origin master: method 2
git branch -vv: display default remote branch